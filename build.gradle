buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

plugins {
    id "org.sonarqube" version "2.3"
}

repositories {
    maven {
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
}

sonarqube {
    properties{
        property "sonar.host.url", "http://home.kk-sc.de:9000"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectName", "Minecolonies"
        property "sonar.branch", System.getenv()['TEAMCITY_BRANCH'] != null ? System.getenv()['TEAMCITY_BRANCH'] : System.getenv()['TRAVIS_BRANCH']
    }
}

apply plugin: 'idea'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'jacoco'

tasks.withType(Checkstyle) {
    reports {
        xml.enabled true
    }
}

checkstyle {
    toolVersion ="7.6.1"
}

checkstyleTest.enabled = false
checkstyleMain.enabled = false
checkstyleApi.enabled = false
pmdTest.enabled = false
pmdMain.enabled = false
pmdApi.enabled = false

pmd {
    toolVersion = "5.5.5"
    ruleSetFiles = files("config/PMD/pmd.xml")
    ignoreFailures = true
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}


dependencies {
    deobfCompile "slimeknights.mantle:Mantle:1.10.2-1.1.5.205"
    deobfCompile "slimeknights:TConstruct:1.10.2-2.6.3.500"

    testCompile 'junit:junit:4.11'
    testCompile "org.mockito:mockito-core:1.+"
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.6.5'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.6.5'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'

    compile 'com.intellij:annotations:+@jar'
}

ext.configFile = file "build.properties"

configFile.withReader {

    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

group = "com.minecolonies"
config.buildnumber = System.getenv()['BUILD_NUMBER'] != null ? System.getenv()['BUILD_NUMBER'] : System.getenv()['TRAVIS_BUILD_NUMBER']
version = "${config.minecraft_version}-${config.minecolonies_major}.${config.minecolonies_minor}.${config.buildnumber}"

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

minecraft {

    version = config.minecraft_version + "-" + config.forge_version
    runDir = "run"
	
	mappings = "${config.minecolonies_mappings}"
	
    replace "@VERSION@", project.version
    replaceIn "lib/Constants.java"
    if (project.hasProperty("signature"))
        replace "@FINGERPRINT@", signature
}

processResources {

    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint"
}

//task sourceJar(type: Jar) {
//    from sourceSets.main.allSource
//    appendix = 'src'
//}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    appendix = 'deobf'
}

task incrementBuildNumber() {
    dependsOn "reobf"
    doLast {
        config.minecolonies_build = (config.minecolonies_build.toString().toInteger()) + 1

        configFile.withWriter {
            config.toProperties().store(it, "")
        }
    }
}

jar {
    dependsOn "deobfJar"
    appendix = 'universal'
    archiveName = "minecolonies-universal-" + project.version + ".jar"

    manifest {
        attributes 'FMLAT': "minecolonies_at.cfg"
    }
}

idea {
    module {
        inheritOutputDirs = true
    }
}

task copyToLib(type: Copy) {
    // into "build/lib"
    into "lib"
    from configurations.runtime
}

task runCheckStyle(type: Checkstyle) {
    description 'Runs Checkstyle inspection against Minecolonies sourcesets.'
    group = 'Code Quality'

    ignoreFailures = true
    showViolations = false

    source 'src/main/java'

    include '**/*.java'

    exclude '**/com/minecolonies/blockout/**'

    classpath = files()
}

task runPMD(type: Pmd) {
    description 'Runs PMD inspection against Minecolonies sourcesets.'
    group = 'Code Quality'

    ignoreFailures = true

    source 'src/main/java'

    include '**/*.java'

    exclude '**/com/minecolonies/blockout/**'

    classpath = files()
}

task runSonar() {
    dependsOn runCheckStyle, runPMD
    description 'Runs the equivalent of a SonarQube analysis directly in the build process. Calls runCheckStyle and runPMD'
    group = 'Code Quality'
}
